#include "mainwindow.h"
#include "ui_mainwindow.h"

#include <QDateTime>
#include <QFile>
#include <QTextStream>
#include <QCoreApplication>
#include <QHostAddress>
#include <QNetworkInterface>
#include <QTimer>
#include <QDebug>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent),
    ui(new Ui::MainWindow),
    server(new QTcpServer(this)),
    socket(nullptr),
    udpSocket(new QUdpSocket(this)),
    discoveryTimer(new QTimer(this)),
    broadcastTimer(new QTimer(this))
{
    ui->setupUi(this);
    setWindowTitle("–õ–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Ç");

    ui->modeLabel->setText("–†–µ–∂–∏–º: ‚Äî");
    ui->modeLabel->setStyleSheet("font-weight: bold; color: gray;");

    // --- –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∏–∫ ---
    QFile fileNick(QCoreApplication::applicationDirPath() + "/nick.txt");
    if (fileNick.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QTextStream in(&fileNick);
        nick = in.readLine().trimmed();
        fileNick.close();
        ui->nickInput->setText(nick);
        if (!nick.isEmpty())
            ui->chatBox->append("üü¢ –ù–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: " + nick);
    }

    // --- –ö–Ω–æ–ø–∫–∏ ---
    connect(ui->saveNickButton, &QPushButton::clicked, this, &MainWindow::saveNick);
    connect(ui->clearChatButton, &QPushButton::clicked, this, &MainWindow::clearChat);
    connect(ui->sendButton, &QPushButton::clicked, this, &MainWindow::sendMessage);
    connect(ui->messageInput, &QLineEdit::returnPressed, this, &MainWindow::sendMessage);

    // --- –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é ---
    QString chatFilePath = QCoreApplication::applicationDirPath() + "/chat.txt";
    QFile fileChat(chatFilePath);
    if (fileChat.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QTextStream in(&fileChat);
        while (!in.atEnd()) ui->chatBox->append(in.readLine());
        fileChat.close();
    }

    // --- –ö–ª–∏–µ–Ω—Ç –∏—â–µ—Ç —Å–µ—Ä–≤–µ—Ä ---
    startClientDiscovery();

    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ 7 —Å–µ–∫—É–Ω–¥ ‚Äî —Å—Ç–∞–Ω–µ–º —Å–µ—Ä–≤–µ—Ä–æ–º
    connect(discoveryTimer, &QTimer::timeout, this, &MainWindow::becomeServer);
    discoveryTimer->setSingleShot(true);
    discoveryTimer->start(7000);
}

MainWindow::~MainWindow() {
    delete ui;
}

// === –ö–õ–ò–ï–ù–¢: –ø–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ UDP ===
void MainWindow::startClientDiscovery() {
    const quint16 discoveryPort = 45454;

    bool bound = udpSocket->bind(QHostAddress::AnyIPv4, discoveryPort,
                                 QUdpSocket::ShareAddress | QUdpSocket::ReuseAddressHint);
    if (!bound) {
        ui->chatBox->append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å UDP-–ø–æ—Ä—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è.");
        return;
    }

    connect(udpSocket, &QUdpSocket::readyRead, this, &MainWindow::onUdpRead);
    ui->chatBox->append("üì° –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...");
}

// === –ö–õ–ò–ï–ù–¢: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—à–µ–¥—à–∏—Ö UDP –ø–∞–∫–µ—Ç–æ–≤ ===
void MainWindow::onUdpRead() {
    if (isServer) return; // üîí –ï—Å–ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä ‚Äî –Ω–µ —Å–ª—É—à–∞–µ–º –ø–∞–∫–µ—Ç—ã

    while (udpSocket->hasPendingDatagrams()) {
        QByteArray datagram;
        datagram.resize(int(udpSocket->pendingDatagramSize()));
        QHostAddress sender;
        quint16 senderPort = 0;
        udpSocket->readDatagram(datagram.data(), datagram.size(), &sender, &senderPort);

        QString msg = QString::fromUtf8(datagram).trimmed();
        if (msg.startsWith("SERVER:")) {
            if (isClient) return; // üîí –£–∂–µ –∫–ª–∏–µ–Ω—Ç ‚Äî –∏–≥–Ω–æ—Ä

            QStringList parts = msg.split(":");
            quint16 port = 12345;
            if (parts.size() > 1) port = parts.at(1).toUShort();

            ui->chatBox->append("üü¢ –ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä: " + sender.toString() + ":" + QString::number(port));

            isClient = true;
            discoveryTimer->stop();
            udpSocket->close();

            connectToServer(sender.toString(), port);

            ui->modeLabel->setText("–†–µ–∂–∏–º: –ö–ª–∏–µ–Ω—Ç");
            ui->modeLabel->setStyleSheet("color: blue; font-weight: bold;");
            return;
        }
    }
}


// === –°–¢–ê–ù–û–í–ò–ú–°–Ø –°–ï–†–í–ï–†–û–ú ===
void MainWindow::becomeServer() {
    // –ï—Å–ª–∏ —É–∂–µ –∫—Ç–æ-—Ç–æ —Å—Ç–∞–ª –∫–ª–∏–µ–Ω—Ç–æ–º ‚Äî –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º
    if (isClient || isServer)
        return;

    discoveryTimer->stop();

    if (server->listen(QHostAddress::Any, 12345)) {
        isServer = true;

        connect(server, &QTcpServer::newConnection, this, &MainWindow::handleNewConnection);
        ui->chatBox->append("üü¢ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (–ø–æ—Ä—Ç 12345).");
        ui->modeLabel->setText("–†–µ–∂–∏–º: –°–µ—Ä–≤–µ—Ä");
        ui->modeLabel->setStyleSheet("color: green; font-weight: bold;");

        // –ü–µ—Ä–µ—Å—Ç–∞–µ–º —Å–ª—É—à–∞—Ç—å UDP-–ø–∞–∫–µ—Ç—ã (–º—ã —Ç–µ–ø–µ—Ä—å —Å–µ—Ä–≤–µ—Ä)
        udpSocket->close();

        // –ó–∞–ø—É—Å–∫–∞–µ–º broadcast —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä
        connect(broadcastTimer, &QTimer::timeout, this, &MainWindow::broadcastPresence);
        broadcastTimer->start(2000); // –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    } else {
        ui->chatBox->append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç).");
    }
}


// === –°–ï–†–í–ï–†: UDP broadcast (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ UI) ===
void MainWindow::broadcastPresence() {
    QByteArray data = "SERVER:12345";
    udpSocket->writeDatagram(data, QHostAddress::Broadcast, 45454);
}

// === –ö–õ–ò–ï–ù–¢: –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É ===
void MainWindow::connectToServer(const QString &ip, quint16 port) {
    if (socket) {
        socket->deleteLater();
        socket = nullptr;
    }

    socket = new QTcpSocket(this);
    connect(socket, &QTcpSocket::connected, [this]() {
        ui->chatBox->append("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É!");
        if (!nick.isEmpty()) socket->write(nick.toUtf8() + "\n");
    });
    connect(socket, &QTcpSocket::readyRead, this, &MainWindow::readMessage);

    socket->connectToHost(ip, port);
}

// === –°–ï–†–í–ï–†: –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è ===
void MainWindow::handleNewConnection() {
    QTcpSocket *newClient = server->nextPendingConnection();
    if (!newClient) return;

    clients.append(newClient);
    clientNicks[newClient] = "";

    connect(newClient, &QTcpSocket::readyRead, this, &MainWindow::readMessage);
    connect(newClient, &QTcpSocket::disconnected, [this, newClient]() {
        QString name = clientNicks.value(newClient, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π");
        ui->chatBox->append("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: " + name);
        clients.removeAll(newClient);
        clientNicks.remove(newClient);
        newClient->deleteLater();
    });

    ui->chatBox->append("üü¢ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: " + newClient->peerAddress().toString());
}

// === –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π ===
void MainWindow::readMessage() {
    QTcpSocket* senderSocket = qobject_cast<QTcpSocket*>(sender());
    if (!senderSocket) return;

    while (senderSocket->canReadLine()) {
        QString msg = QString::fromUtf8(senderSocket->readLine()).trimmed();

        if (server->isListening() && clientNicks.value(senderSocket).isEmpty()) {
            clientNicks[senderSocket] = msg;
            ui->chatBox->append("üü¢ –ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫: " + msg);
            continue;
        }

        QString currentTime = QDateTime::currentDateTime().toString("HH:mm:ss");
        QString fullMsg = "[" + currentTime + "] " + msg;

        if (server->isListening()) {
            broadcastMessage(senderSocket, msg);
        } else {
            ui->chatBox->append(fullMsg);
        }

        appendToChatFile(fullMsg);
    }
}

// === –°–ï–†–í–ï–†: —Ä–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º ===
void MainWindow::broadcastMessage(QTcpSocket* sender, const QString& msg) {
    QString senderNick = sender ? clientNicks.value(sender, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π") : (nick.isEmpty() ? "–°–µ—Ä–≤–µ—Ä" : nick);
    QString currentTime = QDateTime::currentDateTime().toString("HH:mm:ss");
    QString fullMsg = "[" + currentTime + "] " + senderNick + ": " + msg;

    for (QTcpSocket* client : qAsConst(clients)) {
        if (client && client->isOpen()) {
            client->write(fullMsg.toUtf8() + "\n");
        }
    }

    ui->chatBox->append(fullMsg);
    appendToChatFile(fullMsg);
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ UI ===
void MainWindow::sendMessage() {
    QString msg = ui->messageInput->text().trimmed();
    if (msg.isEmpty()) return;

    if (socket && socket->isOpen()) {
        // –ö–ª–∏–µ–Ω—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–∏–∫–∞, —Å–µ—Ä–≤–µ—Ä —Å–∞–º –¥–æ–±–∞–≤–∏—Ç)
        socket->write(msg.toUtf8() + "\n");
    } else if (server->isListening()) {
        // –°–µ—Ä–≤–µ—Ä: —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º
        broadcastMessage(nullptr, msg);
    } else {
        ui->chatBox->append("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.");
    }

    ui->messageInput->clear();
}


// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞ ===
void MainWindow::saveNick() {
    nick = ui->nickInput->text().trimmed();
    if (nick.isEmpty()) return;

    QFile file(QCoreApplication::applicationDirPath() + "/nick.txt");
    if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
        QTextStream out(&file);
        out << nick;
        file.close();
    }
    ui->chatBox->append("üü¢ –ù–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: " + nick);
}

// === –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ ===
void MainWindow::clearChat() {
    QString chatFilePath = QCoreApplication::applicationDirPath() + "/chat.txt";
    QFile file(chatFilePath);
    if (file.open(QIODevice::WriteOnly | QIODevice::Text)) file.close();
    ui->chatBox->clear();
    ui->chatBox->append("üü¢ –ß–∞—Ç –æ—á–∏—â–µ–Ω.");
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª ===
void MainWindow::appendToChatFile(const QString &msg) {
    QString chatFilePath = QCoreApplication::applicationDirPath() + "/chat.txt";
    QFile file(chatFilePath);
    if (file.open(QIODevice::Append | QIODevice::Text)) {
        QTextStream out(&file);
        out << msg << "\n";
        file.close();
    }
}
